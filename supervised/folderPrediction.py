"""
Modularized prediction of folder using BERT dimensions as features.
Takes dataframes generated by dataset vectorizer as inputs
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler

from keras.models import Sequential
from keras.utils import to_categorical
from keras.layers import Dense, Activation
from keras.regularizers import l2
from sklearn.model_selection import train_test_split

def train_folder_model(inPath, trainFraction=0.7):
    """
        -inPath:        path at which dataframe has been pickled
        -trainFraction: the fraction of the data that will be used for
                        training rather than testing
        -epochs:        the number of epochs for which to train the model
    """
    # load dataframe from inPath
    rawDf = pd.read_pickle(inPath)

    # drop file and folder columns and save folder column as targets
    vecDf = rawDf.drop(columns=['file', 'folder'])
    rawTargets = list(rawDf['folder'])

    # normalize z-score of vecDf dimensions
    normalizedVecDf = pd.DataFrame(StandardScaler().fit_transform(X=vecDf))
    print(f'Normalized Dataframe Head:\n{normalizedVecDf.describe().head()}')

    # one-hot encode targets
    targetDict = {target:i for i, target in enumerate(set(rawTargets))}
    numericTargets = [targetDict[target] for target in rawTargets]
    encodedTargets = to_categorical(numericTargets)

    # model architecture
    model = Sequential()
    model.add(Dense(100, activation='relu', input_dim=((x_train.shape)[1])))
    model.add(Dense(100, activation='relu', kernel_regularizer=l2(0.01)))
    # binary output layer with sigmoid activation
    model.add(Dense(1, activation='sigmoid'))
    # compile the model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    # train the model
    model.fit(x_train, y_train, epochs=9)
